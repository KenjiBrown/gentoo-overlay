Binary files dbmail-3.2.4.orig/src/.dm_mailboxstate.c.swp and dbmail-3.2.4/src/.dm_mailboxstate.c.swp differ
diff -uriN dbmail-3.2.4.orig/src/dm_mailboxstate.c dbmail-3.2.4/src/dm_mailboxstate.c
--- dbmail-3.2.4.orig/src/dm_mailboxstate.c	2020-06-08 02:19:38.000000000 -0500
+++ dbmail-3.2.4/src/dm_mailboxstate.c	2021-11-08 15:52:10.000000000 -0600
@@ -91,6 +91,7 @@
 	unsigned nrows = 0, i = 0, j;
 	struct timeval before, after; 
 	const char *query_result;
+	uint64_t tempId;
 	MessageInfo *result;
 	GTree *msginfo;
 	uint64_t *uid, id = 0;
@@ -99,13 +100,16 @@
 	Field_T frag;
 	INIT_QUERY;
 	char filterCondition[64];  memset(filterCondition,0,64);
+	/* the initialization should be done elsewhere, see ols MailboxState_new and MailboxState_update */
+	msginfo=MailboxState_getMsginfo(M);
+	
 	if (coldLoad){
-	    msginfo = g_tree_new_full((GCompareDataFunc)ucmpdata, NULL,(GDestroyNotify)g_free,(GDestroyNotify)MessageInfo_free);    
+	    //msginfo = g_tree_new_full((GCompareDataFunc)ucmpdata, NULL,(GDestroyNotify)g_free,(GDestroyNotify)MessageInfo_free);    
 	    TRACE(TRACE_DEBUG, "SEQ New");
 	    snprintf(filterCondition,64-1,"/*SEQ New*/ AND m.status < %d ", MESSAGE_STATUS_DELETE);
 	}else{
 	    uint64_t seq=MailboxState_getSeq(M);
-	    msginfo=MailboxState_getMsginfo(M);
+	    //msginfo=MailboxState_getMsginfo(M);
 	    
 	    TRACE(TRACE_DEBUG, "SEQ RENew");
 	    //MailboxState_uid_msn_new(M);
@@ -141,22 +145,26 @@
 		i++;
 
 		id = db_result_get_u64(r, IMAP_NFLAGS + 3);
-
-		uid = g_new0(uint64_t,1); *uid = id;
 		
+		/* reset */
+		shouldAdd=0;
 		if (coldLoad){
 		    /* new element*/
 		    result = g_new0(MessageInfo,1);
+			uid = g_new0(uint64_t,1); 
+			*uid = id;
 		    shouldAdd=1;
 		    result->expunge=0;
 		    result->expunged=0;
 			//TRACE(TRACE_DEBUG, "SEQ CREATED %ld",id);
 		}else{
 		    /* soft renew, so search */
-		    result = g_tree_lookup(msginfo,  &id);     
-		    if (result==NULL){
+		    result = g_tree_lookup(msginfo, &id);     
+		    if (result == NULL){
 				/* not found so create*/
 				result = g_new0(MessageInfo,1);
+				uid = g_new0(uint64_t,1); 
+				*uid = id;
 				shouldAdd=1;
 				result->expunge=0;
 				result->expunged=0;
@@ -203,8 +211,10 @@
 		    }else{
 				if (shouldAdd==1){
 					/* message is in state of state=2 or already deleted but not in our state */
+					g_tree_remove(msginfo,uid);
 					g_free(result);
-					continue;
+					g_free(uid);
+					continue; 
 				}
 			
 		    }
@@ -213,11 +223,9 @@
 		if (shouldAdd==1){
 			//TRACE(TRACE_DEBUG, "SEQ ADDED %ld",id);
 		    /* it's new */
-		    g_tree_insert(msginfo, uid, result);  
+			g_tree_insert(msginfo, uid, result);  
 		}else{
-		    /* do not forget to remove unused references */
-		    //g_free(uid);
-		    //g_free(result);
+		    /* no need, result was updated */
 		}
 
 	}
@@ -229,14 +237,14 @@
 	}
 
 	db_con_clear(c);
-	//Optimize Keywords search, Cosmin Cioranu
 	
 	memset(query, 0, sizeof(query));
 	snprintf(query, DEF_QUERYSIZE-1,
-		"SELECT k.message_idnr, group_concat(distinct keyword) FROM %skeywords k "
+		"SELECT k.message_idnr, k.keyword FROM %skeywords k "
 		"LEFT JOIN %smessages m ON k.message_idnr=m.message_idnr "
 		"WHERE m.mailbox_idnr = ? %s "
-		"group by m.message_idnr",
+		"order by m.message_idnr "
+		,
 		DBPFX, DBPFX,
 		filterCondition);
 
@@ -245,40 +253,22 @@
 	db_stmt_set_u64(stmt, 1, M->id);
 	r = db_stmt_query(stmt);
 	gettimeofday(&before, NULL); 
+	tempId=0;
+	
 	while (db_result_next(r)) {
 		nrows++;
 		id = db_result_get_u64(r,0);
 		
-		/* process keywords, keywords are grouped by in order to avoid search over tree */ 
-		const char * keywords = db_result_get(r,1);
-		TRACE(TRACE_INFO, "Keyword line [%d %s]", nrows, keywords);
-		if (strlen(keywords)>0){
-		    if ((result = g_tree_lookup(msginfo, &id)) != NULL){
-				/* keywords, splitting */
-				GList *klist = NULL; 
-				GString *t; 
-				t = g_string_new(keywords);  
-				klist = g_string_split(t, ","); 
-				g_string_free(t,TRUE); 
-				klist = g_list_first(klist);
-				while(klist) { 
-					char *keyword = (char *)klist->data;
-					TRACE(TRACE_INFO, "\tKeyword %s", keyword);
-					if (strlen(keyword) < 1) continue;
-					result->keywords = g_list_append(result->keywords, g_strdup(keyword));
-					if (! g_list_next(klist)) break;
-					klist = g_list_next(klist); 
-				}
-				g_list_destroy(klist); 
-				/*
-				char delim[] = ",";
-				char *keyword = strtok(keywords, delim);
-				while(keyword != NULL){
-					//TRACE(TRACE_INFO, "Keyword [%s]", keyword);
-					result->keywords = g_list_append(result->keywords, g_strdup(keyword));
-					keyword = strtok(NULL, delim);
-				}
-				*/
+		const char * keyword = db_result_get(r,1);
+		if (strlen(keyword)>0){
+			TRACE(TRACE_INFO, "Keyword line [%d %s]", nrows, keyword);
+			/* id is presented via query in ordered fashion so, we use tempId as a cached last tree lookup */
+			if ( tempId!=id || tempId==0 ){
+				result = g_tree_lookup(msginfo, &id);
+				tempId=id;
+			}
+		    if ( result != NULL ){
+				result->keywords = g_list_append(result->keywords, g_strdup(keyword));
 			}
 		}
 	}
@@ -286,12 +276,8 @@
 	
 	gettimeofday(&after, NULL); 
 	log_query_time("Parsing Keywords ",before,after);
-	if (coldLoad){
-	    MailboxState_setMsginfo(M, msginfo);
-	}else{
-	    MailboxState_remap(M);
-	}
-
+	/* on both cases can use the same function due to some checks at MailboxState_setMsgInfo*/ 
+	MailboxState_setMsginfo(M, msginfo);
 	return M;
 }
 
